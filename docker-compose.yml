version: '3.4'

x-cache-from:
  - &cache
    cache_from:
      - ${NGINX_IMAGE:-quay.io/api-platform/nginx}
      - ${PHP_IMAGE:-quay.io/api-platform/php}

x-network:
  &network
  networks:
    - proxy

services:
  traefik:
    image: traefik:v2.3
    container_name: traefik
    ports:
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
      - target: 8080
        published: 8080
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      - ./certs:/etc/certs:ro
    <<: *network
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik=true
  
  php:
    container_name: "php"
    build:
      context: ./api
      target: api_platform_php
      <<: *cache
    image: ${PHP_IMAGE:-quay.io/api-platform/php}
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    environment:
      - APP_ENV=${APP_ENV}
      - APP_NAME=${APP_NAME}
      - APP_SECRET=${APP_SECRET}
      - CORS_ALLOW_ORIGIN=^${HTTP_OR_SSL}(${SUBDOMAINS}.)?${DOMAIN}$$
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASS}@db/${DB_NAME}
      - EMAIL_USER=${EMAIL_USER}
      # - JWT_PASSPHRASE=${JWT}
      - TRUSTED_HOSTS=^(${SUBDOMAINS}\.)?${DOMAIN}$$
    depends_on:
      - db
    volumes:
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini/:/usr/local/etc/php/conf.d/api-platform.ini
    <<: *network

  api:
    container_name: "api"
    build:
      context: ./api
      target: api_platform_nginx
      <<: *cache
    image: ${NGINX_IMAGE:-quay.io/api-platform/nginx}
    depends_on:
      - php
    volumes:
      - ./api/public:/srv/api/public:ro
    expose: 
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.api.tls=true
    <<: *network

  db:
    container_name: "db"
    image: postgres:12-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
    volumes:
      - db-data:/var/lib/postgresql/data:rw
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
    <<: *network

  # client:
  #   container_name: "client"
  #   build:
  #     context: ./client
  #   volumes:
  #     - ./client:/usr/src/client:rw,cached
  #     - /usr/src/client/node_modules
  #   extra_hosts:
  #     - "localhost:127.0.0.1"
  #   <<: *network
  #   labels:
  #     # Explicitly tell Traefik to expose this container
  #     traefik.enable: true
  #     traefik.http.routers.client.entrypoints: web
  #     traefik.http.routers.client-https.entrypoints: websecure
  #     # URL
  #     traefik.http.routers.client.rule: HostRegexp(`{subdomains:(www.)?}${DOMAIN}`)
  #     traefik.http.routers.client-https.rule: HostRegexp(`{subdomains:(www.)?}${DOMAIN}`)
        
volumes:
  db-data: {}

networks:
  proxy:
    external: true