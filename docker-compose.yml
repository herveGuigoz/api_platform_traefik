version: '3.4'

x-cache-from:
  - &api-cache-from
    cache_from:
      - ${NGINX_IMAGE:-quay.io/api-platform/nginx}
      - ${PHP_IMAGE:-quay.io/api-platform/php}

x-network:
  &network
  networks:
    - proxy

services:
  traefik:
    image: traefik:latest
    container_name: "traefik"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./traefik/traefik.toml:/traefik.toml
      - ./traefik/acme.json:/acme.json
      - ./traefik/errors.log:/etc/traefik/applog.log
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --api
      - --log.filePath=/etc/traefik/applog.log
      - --log.level=ERROR
    labels:
      traefik.http.routers.traefik.rule: Host(`traefik.${DOMAIN}`)
      traefik.http.routers.traefik.service: api@internal
    <<: *network
  
  php:
    container_name: "php"
    build:
      context: ./api
      target: api_platform_php
      <<: *api-cache-from
    image: ${PHP_IMAGE:-quay.io/api-platform/php}
    environment:
      - APP_ENV=${APP_ENV}
      - APP_NAME=${APP_NAME}
      - APP_SECRET=${APP_SECRET}
      - CORS_ALLOW_ORIGIN=^${HTTP_OR_SSL}(${SUBDOMAINS}.)?${DOMAIN}$$
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASS}@db/${DB_NAME}
      - EMAIL_USER=${EMAIL_USER}
      # - JWT_PASSPHRASE=${JWT}
      # - MAILGUN_DOMAIN=${DOMAIN}
      # - MAILGUN_KEY=${EMAIL_PASS}
      - TRUSTED_HOSTS=^(${SUBDOMAINS}\.)?${DOMAIN}$$
    depends_on:
      - db
    volumes:
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini/:/usr/local/etc/php/conf.d/api-platform.ini
    labels:
      traefik.enable: false
    <<: *network

  api:
    container_name: "api"
    build:
      context: ./api
      target: api_platform_nginx
      <<: *api-cache-from
    image: ${NGINX_IMAGE:-quay.io/api-platform/nginx}
    depends_on:
      - php
    volumes:
      - ./api/public:/srv/api/public:ro
    expose: 
      - 80
    labels:
      traefik.enable: true
      # http router
      traefik.http.routers.api-http.entrypoints: web
      traefik.http.routers.api-http.rule: Host(`api.${DOMAIN}`)
      # https router
      traefik.http.routers.api-https.entrypoints: websecure
      traefik.http.routers.api-https.rule: Host(`api.${DOMAIN}`)
    <<: *network

  db:
    container_name: "db"
    image: postgres:12-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
    volumes:
      - db-data:/var/lib/postgresql/data:rw
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
    labels:
      traefik.enable: false
    <<: *network

  client:
    container_name: "client"
    build:
      context: ./client
    volumes:
      - ./client:/usr/src/client:rw,cached
      - /usr/src/client/node_modules
    extra_hosts:
      - "localhost:127.0.0.1"
    <<: *network
    labels:
      # Explicitly tell Traefik to expose this container
      - traefik.enable=true
      # Point d'entré web (http)
      - traefik.http.routers.client-http-${DOMAIN}.entrypoints=web
      # Point d'entré web-secure (https)
      - traefik.http.routers.client-https-${DOMAIN}.entrypoints=websecure
      # URL HTTP
      - traefik.http.routers.client-http-${DOMAIN}.rule=HostRegexp(`{subdomains:(www.)?}${DOMAIN}`)
      # URL HTTPS
      - traefik.http.routers.client-https-${DOMAIN}.rule=HostRegexp(`{subdomains:(www.)?}${DOMAIN}`)
      
volumes:
  db-data: {}

networks:
  proxy:
    external: true